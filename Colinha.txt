GET

  async function fetchData() {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get<Todo[]>(
        "https://jsonplaceholder.typicode.com/todos"
      );
      setTodos(response.data.slice(0, 10)); 
    } catch (err) {
      console.error("Error fetching data:", err);
      setError("Falha ao carregar os dados");
    } finally {
      setLoading(false);
    }
  }

                  {todos.map((todo) => (
                    <Render
                      key={todo.id}
                      id={todo.id}
                      title={todo.title}
                      completed={todo.completed}
                      onToggle={toggleCompleted}
                      onEdit={() => handleEdit(todo)}
                      onDelete={() => handleDelete(todo)}
                    />
                  ))}

POST

async function onSubmit(formData: FormValues) {
        setSubmitting(true);
        try {
            console.log('Enviando dados:', formData);
            const response = await axios.post('https://jsonplaceholder.typicode.com/todos', {
                title: formData.title,
                completed: formData.status,
                userId: 1
            });
            console.log('Resposta da API:', response.data);
            
            if (response.status === 201) {
                toast.success('Tarefa criada com sucesso!');
                form.reset();
                onOpenChange?.(false);
                onSuccess?.(response.data);
            }
        } catch (error) {
            console.error('Erro completo:', error);
            toast.error('Erro ao criar a tarefa. Tente novamente.');
        } finally {
            setSubmitting(false);
        }
    }

PUT

async function onSubmit(formData: FormValues) {
        setSubmitting(true);
        try {
            console.log('Atualizando tarefa:', { id, ...formData });
            
            const response = await axios.put(`https://jsonplaceholder.typicode.com/todos/${id}`, {
                id: id,
                title: formData.title,
                completed: formData.status,
                userId: 1
            });
            
            console.log('Resposta da API (PUT):', response.data);
            
            if (response.status === 200) {
                toast.success('Tarefa atualizada com sucesso!');
                form.reset();
                onOpenChange?.(false);
                onSuccess?.(response.data);
            } else {
                throw new Error('Falha na atualização da tarefa');
            }
        } catch (error) {
            console.error('Erro ao atualizar a tarefa:', error);
            toast.error('Erro ao atualizar a tarefa.');
        } finally {
            setSubmitting(false);
        }
    }

DELETE

    const handleDelete = async () => {
        setDeleting(true);
        try {
            console.log('Excluindo tarefa:', id);
            
            const response = await axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`);
            
            console.log('Resposta da API (DELETE):', response.status);
            
            if (response.status === 200) {
                toast.success("Tarefa excluída com sucesso!");
                onOpenChange?.(false);
                onSuccess?.(id);
            } else {
                throw new Error('Falha na exclusão da tarefa');
            }
        } catch (error) {
            console.error('Erro ao excluir a tarefa:', error);
            toast.error('Erro ao excluir a tarefa.');
        } finally {
            setDeleting(false);
        }
    };